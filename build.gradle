// task hello{
// 	doLast{
// 		println 'hello world'
		//这些操作其实就是一个用 groovy 书写的闭包。
// 	}
// }

//上述简洁写法  使用闭包来定义一个叫做hell的任务  << 操作符 是 doLast 的简写方式。
task hello << {
	println 'hello world'
}



task upper << {
	String someString = 'mY_nAmE'
	println "Original" + someString
	println "Upper case :" + someString.toUpperCase()
}


//任务依赖
task intro(dependsOn:hello) << {
	println "I am Gradle"
}

//延迟依赖  报错 必须字母开头 蒙蔽
// task delayDepends(dependsOn: ‘hello’) << {
// 	println "delayDepends"
// }



//动态任务  借助 Groovy 的强大不仅可以定义简单任务还能做更多的事。例如，可以动态定义任务。
//定义一个最大size为4的任务 命令行执行：gradle -q task1(2或3) 如果执行4会报错
4.times { counter ->
	task "task$counter" << {
		println "I am task number $counter"
	}
}


//任务操纵（相当于扩展？）  执行：gradle -q task0
task0.dependsOn task2,task3




//通过 API 进行任务之间的通信 - 增加任务行为
hello.doFirst {//任务开头 可多次调用
    println 'Hello doFirst'
}
hello.doLast {//任务结尾 可多次调用
    println 'Hello doLast'
}
hello << {//<< 操作符 是 doLast 的简写方式。
    println 'Hello hello << '
}



//以属性的方式访问任务     对于插件提供的内置任务。这尤其方便(例如:complie)
hello.doLast {
    println "Greetings from the $hello.name task."
}



//增加自定义属性 例如,新增一个叫做 myProperty 的属性，用 ext.myProperty 的方式给他一个初始值。这样便增加了一个自定义属性。执行：gradle -q printTaskProperties
task myTask{
	ext.myProperty = "myValue"
}
task printTaskProperties << {
	println myTask.myProperty
}


//调用Ant任务    利用 AntBuilder 执行 ant.loadfile 编译不过去 路径问题 待研究
task loadfile << {
	def files = file('../antLoadfileResources').listFiles().sort()
	files.each{File file ->
		if (file.isFile()) {
            ant.loadfile(srcFile: file, property: file.name)
            println " *** $file.name ***"
            println "${ant.properties[file.name]}"
		}

	}
}



//定义默认任务  入口函数？  DOC:每个子项目都可以指定单独的默认任务。如果子项目未进行指定将会调用父项目指定的的默认任务。
defaultTasks 'clean', 'run'
task clean << {
    println 'Default Cleaning!'
}
task run << {
    println 'Default Running!'
}
task other << {
    println "I'm not a default task!"
}


//Configure by DAG
task distribution << {
    println "We build the zip with version=$version"
}
task release(dependsOn: 'distribution') << {
    println 'We release now'
}
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}



//多任务调用
task compile << {
    println 'compiling source'
}
task compileTest(dependsOn: compile) << {
    println 'compiling unit tests'
}
task test(dependsOn: [compile, compileTest]) << {
    println 'running unit tests'
}
task dist(dependsOn: [compile, test]) << {
    println 'building the distribution'
}


//project属性
task projectProperty << {
    println name
    println project.name
    println project.path
    println project.description
}



//定义局部变量   局部变量是用 def 关键字声明的。它们只在定义它们的范围内可以被访问。局部变量是 Groovy 语言底层的一个特征。
def dest = "dest"
task copy(type:Copy){
    from "source"
    into dest
}







//排除任务 gradle dist -x test


//失败后继续执行 --continue


//简化任务名  上面的例子你也可以这么写。用 gradle di 来直接调用 dist 任务。

//选择文件构建 gradle -q -b subdir/myproject.gradle hello    也可以使用 -p 参数来指定构建的目录，例如在多项目构建中你可以用 -p 来替代 -b 参数。
//选择构建目录 gradle -q -p subdir hello 
//项目列表 gradle -q projects
//任务列表 gradle -q tasks
//依赖列表 gradle dependencies 












